#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>
#include <iostream>
#include <list>
#include <string>
#include <limits>
#include <cfloat>
#include "traceReplay.h"
#include "cJSON.h"

static int trace_replay(char *config_name, int day);
static int parse_multimedia(cJSON *multi_obj, struct Config *config);
static int parse_basic_app(cJSON *basic_obj, struct Config *config);
static int parse_normal_app(cJSON *normal_obj, struct Config *config);
static int parse_apps(cJSON *apps_obj, struct App *apps, 
			double default_update, double default_loading);
static int parse_ps_name(cJSON *ps_name_obj, struct Config *config);
static double parse_time(string line);

int parse_config(char *config_name, struct Config *config)
{
	FILE *config_fp;
	long len = 0;
	char *config_data;
	int ret = 0;
	cJSON *root_obj;
	cJSON *init_filemap_obj;
	cJSON *multimedia_obj;
	cJSON *basic_app_obj;
	cJSON *normal_app_obj;
	cJSON *ps_name_obj;

	config_fp = fopen(config_name, "r");
	if (config_fp == NULL) {
		printf("error: cannot read %s\n", config_name);
		ret = -1;
		return -1;
	}
	
	fseek(config_fp, 0, SEEK_END);
	len = ftell(config_fp);
	fseek(config_fp, 0, SEEK_SET);

	config_data = (char *)malloc(len);
	if (config_data == NULL) {
		printf("error: failed malloc\n");
		fclose(config_fp);
		return -1;
	}
	fread(config_data, sizeof(char), len, config_fp);

	root_obj = cJSON_Parse(config_data);
	if (root_obj == NULL) {
		printf("error: %s\n", cJSON_GetErrorPtr());
		ret = -1;
		goto out;
	}

	// INIT_FILEMAP
	memset(config->INIT_FILEMAP, 0, PATH_MAX);
	init_filemap_obj = cJSON_GetObjectItem(root_obj, "INIT_FILEMAP");
	if (init_filemap_obj == NULL) {
		sprintf(config->INIT_FILEMAP, "NULL");
	} else {
		sprintf(config->INIT_FILEMAP, "%s", init_filemap_obj->valuestring);
	}
	printf("%s\n", config->INIT_FILEMAP);

	// MULTIMEDIA
	multimedia_obj = cJSON_GetObjectItem(root_obj, "MULTIMEDIA");
	if (multimedia_obj == NULL) {
		printf("error: Parse JSON file, No MULTIMEDIA\n");
		ret = -1;
		goto out;
	} else {
		ret = parse_multimedia(multimedia_obj, config);
		if (ret == -1)
			goto out;
	}

	basic_app_obj = cJSON_GetObjectItem(root_obj, "BASIC_APP");
	if (basic_app_obj == NULL) {
		printf("error: Parse JSON file, No BASIC_APP\n");
		ret = -1;
		goto out;
	} else {
		ret = parse_basic_app(basic_app_obj, config);
		if (ret == -1)
			goto out;
	}

	normal_app_obj = cJSON_GetObjectItem(root_obj, "NORMAL_APP");
	if (normal_app_obj == NULL) {
		printf("error: Parse JSON file, No NORMAL_APP\n");
		ret = -1;
		goto out;
	} else {
		ret = parse_normal_app(normal_app_obj, config);
		if (ret == -1)
			goto out;
	}

	ps_name_obj = cJSON_GetObjectItem(root_obj, "PROCESS");
	if (ps_name_obj == NULL) {
		printf("warning: Failed Parse JSON file, No PROCESS\n");
		ret = 0;
		goto out;
	} else {
		ret = parse_ps_name(ps_name_obj, config);
		if (ret == -1)
			goto out;
	}


out:
	fclose(config_fp);
	free(config_data);
	return ret;
}

static int parse_multimedia(cJSON *multi_obj, struct Config *config)
{
	cJSON *camera_obj;
	cJSON *camera_path_obj;
	cJSON *camera_multipath_obj;
	cJSON *camera_takecount_obj;
	cJSON *camera_deletecount_obj;

	camera_obj = cJSON_GetObjectItem(multi_obj, "CAMERA");

	if (camera_obj == NULL) {
		printf("error: No exist CAMERA in MULTIMEDIA");
		return -1;
	}

	camera_path_obj = cJSON_GetObjectItem(camera_obj, "PATH");
	if (camera_path_obj == NULL) {
		printf("error: No exist PATH in CAMERA");
		return -1;
	}
	memset(config->multi.mul_camera.path, 0, PATH_MAX + 1);
	sprintf(config->multi.mul_camera.path, "%s", camera_path_obj->valuestring);

	camera_multipath_obj = cJSON_GetObjectItem(camera_obj, "MULTIMEDIA_PATH");
	if (camera_multipath_obj == NULL) {
		printf("error: No exist MULTIMEDIA_PATH in CAMERA");
		return -1;
	}
	memset(config->multi.mul_camera.multimedia_path, 0, PATH_MAX + 1);
	sprintf(config->multi.mul_camera.multimedia_path, "%s", camera_multipath_obj->valuestring);

	camera_takecount_obj = cJSON_GetObjectItem(camera_obj, "TAKE_COUNT");
	if (camera_takecount_obj == NULL) {
		printf("error: No exist TAKE_COUNT in CAMERA");
		return -1;
	}
	config->multi.mul_camera.take_count = camera_takecount_obj->valueint;

	camera_deletecount_obj = cJSON_GetObjectItem(camera_obj, "DELETE_COUNT");
	if (camera_deletecount_obj == NULL) {
		printf("error: No exist DELETE_COUNT in CAMERA");
		return -1;
	}
	config->multi.mul_camera.delete_count = camera_deletecount_obj->valueint;

	return 0;
}

static int parse_basic_app(cJSON *basic_obj, struct Config *config)
{
	cJSON *default_update_obj;
	cJSON *default_loading_obj;
	cJSON *apps_obj;
	int app_count;

	default_update_obj = cJSON_GetObjectItem(basic_obj, "DEFAULT_UPDATE_CYCLE");
	if (default_update_obj == NULL) {
		printf("error: No exist DEFAULT_UPDATE_CYCLE in BASIC_APP");
		return -1;
	}
	config->basic_app.default_update_cycle = default_update_obj->valuedouble;

	default_loading_obj = cJSON_GetObjectItem(basic_obj, "DEFAULT_LOADING_CYCLE");
	if (default_loading_obj == NULL) {
		printf("error: No exist DEFAULT_LOADING_CYCLE in BASIC_APP");
		return -1;
	}
	config->basic_app.default_loading_cycle = default_loading_obj->valuedouble;

	apps_obj = cJSON_GetObjectItem(basic_obj, "APPS");
	if (apps_obj == NULL) {
		printf("error: No exist APPS in BASIC_APP");
		return -1;
	}
	app_count = cJSON_GetArraySize(apps_obj);
	config->basic_app.app_count = app_count;
	if (app_count > 0) {
		config->basic_app.apps = (struct App*) malloc(sizeof(struct App) * app_count);
		parse_apps(apps_obj, config->basic_app.apps, config->basic_app.default_update_cycle, config->basic_app.default_loading_cycle);
	}
	
	return 0;
}

static int parse_normal_app(cJSON *normal_obj, struct Config *config)
{
	cJSON *default_update_obj;
	cJSON *default_loading_obj;
	cJSON *install_obj;
	cJSON *uninstall_obj;
	cJSON *apps_obj;
	int app_count;

	default_update_obj = cJSON_GetObjectItem(normal_obj, "DEFAULT_UPDATE_CYCLE");
	if (default_update_obj == NULL) {
		printf("error: No exist DEFAULT_UPDATE_CYCLE in NORMAL_APP");
		return -1;
	}
	config->normal_app.default_update_cycle = default_update_obj->valuedouble;

	default_loading_obj = cJSON_GetObjectItem(normal_obj, "DEFAULT_LOADING_CYCLE");
	if (default_loading_obj == NULL) {
		printf("error: No exist DEFAULT_LOADING_CYCLE in NORMAL_APP");
		return -1;
	}
	config->normal_app.default_loading_cycle = default_loading_obj->valuedouble;

	install_obj = cJSON_GetObjectItem(normal_obj, "APP_INSTALL_CYCLE");
	if (install_obj == NULL) {
		printf("error: No exist APP_INSTALL_CYCLE in NORMAL_APP");
		return -1;
	}
	config->normal_app.install_cycle = install_obj->valuedouble;

	uninstall_obj = cJSON_GetObjectItem(normal_obj, "APP_UNINSTALL_CYCLE");
	if (uninstall_obj == NULL) {
		printf("error: No exist APP_UNINSTALL_CYCLE in NORMAL_APP");
		return -1;
	}
	config->normal_app.uninstall_cycle = uninstall_obj->valuedouble;

	apps_obj = cJSON_GetObjectItem(normal_obj, "APPS");
	if (apps_obj == NULL) {
		printf("error: No exist APPS in BASIC_APP");
		return -1;
	}
	app_count = cJSON_GetArraySize(apps_obj);
	config->normal_app.app_count = app_count;
	if (app_count > 0) {
		config->normal_app.apps = (struct App*) malloc(sizeof(struct App) * app_count);
		parse_apps(apps_obj, config->normal_app.apps, config->normal_app.default_update_cycle, config->normal_app.default_loading_cycle);
	}

	return 0;
}

static int parse_apps(cJSON *apps_obj, struct App *apps, 
			double default_update, double default_loading)
{
	int array_size = cJSON_GetArraySize(apps_obj);
	int i;
	if (array_size == 0) {
		return 0;
	}
	
	for (i = 0; i < array_size; i++)
	{
		cJSON* app_obj = cJSON_GetArrayItem(apps_obj, i);
		cJSON* app_name_obj = cJSON_GetObjectItem(app_obj, "NAME");
		cJSON* app_path_obj = cJSON_GetObjectItem(app_obj, "PATH");
		cJSON* app_update_obj = cJSON_GetObjectItem(app_obj, "UPDATE_CYCLE");
		cJSON* app_loading_obj = cJSON_GetObjectItem(app_obj, "LOADING_CYCLE");
		cJSON* app_psname_obj = cJSON_GetObjectItem(app_obj, "PS_NAME");
		if (app_name_obj == NULL || app_path_obj == NULL || app_psname_obj == NULL) 
			continue;
		memset(apps[i].name, 0, MAX_NAME);
		sprintf(apps[i].name, "%s", app_name_obj->valuestring);
		memset(apps[i].path, 0, PATH_MAX + 1);
		sprintf(apps[i].path, "%s", app_path_obj->valuestring);
		if (app_update_obj == NULL)
			apps[i].update_cycle = default_update;
		else
			apps[i].update_cycle = app_update_obj->valuedouble;
		if (app_loading_obj == NULL)
			apps[i].loading_cycle = default_loading;
		else
			apps[i].loading_cycle = app_loading_obj->valuedouble;
		memset(apps[i].ps_name, 0, MAX_NAME);
		sprintf(apps[i].ps_name, "%s", app_psname_obj->valuestring);
	}

	return 0;
}

static int parse_ps_name(cJSON *ps_name_obj, struct Config *config)
{
	cJSON *install_obj;
	cJSON *update_obj;
	cJSON *loading_obj;
	cJSON *uninstall_obj;

	install_obj = cJSON_GetObjectItem(ps_name_obj, "INSTALL");
	if (install_obj != NULL) {
		int array_size = cJSON_GetArraySize(install_obj);
		for (int i = 0; i < array_size; i++)
		{
			cJSON* app_obj = cJSON_GetArrayItem(install_obj, i);
			string ps_name(app_obj->valuestring);
			config->ps_name.ps_install.push_back(ps_name);
		}
		config->ps_name.ps_install.push_back(string(""));
	}

	update_obj = cJSON_GetObjectItem(ps_name_obj, "UPDATE");
	if (update_obj != NULL) {
		int array_size = cJSON_GetArraySize(update_obj);
		for (int i = 0; i < array_size; i++)
		{
			cJSON* app_obj = cJSON_GetArrayItem(update_obj, i);
			string ps_name(app_obj->valuestring);
			config->ps_name.ps_update.push_back(ps_name);
		}
		config->ps_name.ps_update.push_back(string(""));
	}

	loading_obj = cJSON_GetObjectItem(ps_name_obj, "INSTALL");
	if (loading_obj != NULL) {
		int array_size = cJSON_GetArraySize(loading_obj);
		for (int i = 0; i < array_size; i++)
		{
			cJSON* app_obj = cJSON_GetArrayItem(loading_obj, i);
			string ps_name(app_obj->valuestring);
			config->ps_name.ps_loading.push_back(ps_name);
		}
		config->ps_name.ps_loading.push_back(string(""));
	}

	uninstall_obj = cJSON_GetObjectItem(ps_name_obj, "INSTALL");
	if (uninstall_obj != NULL) {
		int array_size = cJSON_GetArraySize(uninstall_obj);
		for (int i = 0; i < array_size; i++)
		{
			cJSON* app_obj = cJSON_GetArrayItem(uninstall_obj, i);
			string ps_name(app_obj->valuestring);
			config->ps_name.ps_uninstall.push_back(ps_name);
		}
		config->ps_name.ps_loading.push_back(string(""));
	}
	return 0;
}

struct Traceinfo
{
	FILE *fp;
	double time;
	string line;
};

#define SPRINTF_TRACE_PATH_INPUT(BUF, TYPE, PATH, NAME, PS_NAME) \
    sprintf(BUF, "%s/TRACE_%s_%s_%s.input", PATH, NAME, TYPE, PS_NAME);
#define SPRINTF_TRACE_PATH_OUTPUT(BUF, TYPE, PATH, NAME) \
    sprintf(BUF, "%s/TRACE_%s_%s.input", PATH, NAME, TYPE);

static int do_trace_merge(struct App *app, struct PSName *ps_name, string type)
{
	vector<struct Traceinfo*> vector_trace;
	vector<string> *PSName; 
	char line[2048];
	FILE *input_fp, *output_fp;
	struct Traceinfo* trace;
	char buf[PATH_MAX];
	int ret = 0;
	int init = 1;

	if (type.compare("install") == 0)
		PSName = &(ps_name->ps_install);
	if (type.compare("loading") == 0)
		PSName = &(ps_name->ps_loading);
	if (type.compare("update") == 0)
		PSName = &(ps_name->ps_update);
	if (type.compare("uninstall") == 0)
		PSName = &(ps_name->ps_uninstall);
	else
		return -1;

	for (vector<string>::iterator it = PSName->begin(); it != PSName->end(); ++it)
	{
		trace = new Traceinfo;
		if (trace == NULL)
			return -1;
		memset(buf, 0, PATH_MAX);
		SPRINTF_TRACE_PATH_INPUT(buf, type.c_str(), app->path, app->name, (*it).c_str());
		input_fp = fopen(buf, "r");
		if (input_fp == NULL) {
			delete trace;
			continue;
		}
		memset(line, 0, 2048);
		if (fgets(line, 2048, input_fp) == NULL)
		{
			delete trace;
			continue;
		}
		else {
			trace->fp = input_fp;
			trace->line = string(line);
			trace->time = parse_time(string(line));
			vector_trace.push_back(trace);
		}
	}

	trace = new Traceinfo;
	if (trace == NULL)
		return -1;
	memset(buf, 0, PATH_MAX);
	SPRINTF_TRACE_PATH_INPUT(buf, type.c_str(), app->path, app->name, app->ps_name);
	input_fp = fopen(buf, "r");
	if (input_fp == NULL) 
		delete trace;
	else {
		memset(line, 0, 2048);
		if (fgets(line, 2048, input_fp) == NULL)
			delete trace;
		else 
		{
			trace->fp = input_fp;
			trace->line = string(line);
			trace->time = parse_time(string(line));
			vector_trace.push_back(trace);
		}
	}

	memset(buf, 0, PATH_MAX);
	SPRINTF_TRACE_PATH_OUTPUT(buf, type.c_str(), app->path, app->name);
	output_fp = fopen(buf, "w");
	if (output_fp == NULL) {
		ret = -1;
		goto out;
	}

	while (!vector_trace.empty())
	{
		double min_time = DBL_MAX;
		char new_line[2048];
		vector<struct Traceinfo*>::iterator min_it;
		vector<struct Traceinfo*>::iterator it;
		for (it = vector_trace.begin(); it != vector_trace.end(); ++it)
		{
			if (min_time > (*it)->time) {
				min_time = (*it)->time;
				min_it = it;
			}
		}
		
		fprintf(output_fp, "%s", (*min_it)->line.c_str());
		if (fgets(new_line, 2048, (*min_it)->fp) == NULL) {
			fclose((*min_it)->fp);
			delete *min_it;
			vector_trace.erase(min_it);
		}
		else {
			trace->line = string(new_line);
			trace->time = parse_time(string(new_line));
		}
	}

out:
	while (!vector_trace.empty())
	{
		trace = vector_trace.back();
		vector_trace.pop_back();
		fclose(trace->fp);
		delete trace;
	}
	if (output_fp != NULL)
		fclose(output_fp);

	return ret; 
}

static double parse_time(string line)
{
	string substring;
	size_t found;
	double time;

	found = line.find("\t");
	if (found == string::npos)
		return -1;
	substring = line.substr(0, found);

	time = atoll(substring.c_str());

	return time;
}


int trace_merge(struct Config *config)
{
	int i = 0;
	int ret = 0;

	for (i = 0; i < config->basic_app.app_count; i++)
	{
		ret = do_trace_merge(&(config->basic_app.apps[i]), &(config->ps_name), string("loading"));
		ret = do_trace_merge(&(config->basic_app.apps[i]), &(config->ps_name), string("update"));
	}

	for (i = 0; i < config->normal_app.app_count; i++)
	{
		ret = do_trace_merge(&(config->normal_app.apps[i]), &(config->ps_name), string("loading"));
		ret = do_trace_merge(&(config->normal_app.apps[i]), &(config->ps_name), string("update"));
		ret = do_trace_merge(&(config->normal_app.apps[i]), &(config->ps_name), string("install"));
		ret = do_trace_merge(&(config->normal_app.apps[i]), &(config->ps_name), string("uninstall"));
	}

	return ret;
}




